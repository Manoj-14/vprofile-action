name: vprofile-actions
on: workflow_dispatch #its ref to manual trigger
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: vprofileapp
    EKS_CLUSTER: vprofile-eks
jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4
            
            - name: Maven test #ubuntu latest comes with mvn
              run: mvn test

            - name: Checkstyle
              run: mvn checkstyle:checkstyle

            - name: Set Java 11
              uses: actions/setup-java@v4 #https://github.com/marketplace/actions/setup-java-jdk
              with:
                distribution: 'temurin' # See 'Supported distributions' for available options
                java-version: '11'
            
            - name: Setup SonarQube
              uses: warchant/setup-sonar-scanner@v7 #https://github.com/marketplace/actions/sonar-scanner
            
            - name: SonarQube Scan
              run: sonar-scanner
                -Dsonar.host.url=${{ secrets.SONAR_URL }}
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                -Dsonar.sources=src/
                -Dsonar.junit.reportsPath=target/surefire-reports/ 
                -Dsonar.jacoco.reportsPath=target/jacoco.exec 
                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/  

            # - name: SonarQube Quality Gate Check
            #   id: sonarqube-quality-gate-check
            #   uses: sonarsource/sonarqube-scan-action@master   #https://github.com/marketplace/actions/sonarqube-quality-gate-check
            #   timeout-minutes: 5
            #   env:
            #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    BUILD_AND_PUBLISH:
      needs: Testing #it need to mention if not both jobs will run in parallelly
      runs-on: ubuntu-latest
      steps:
        - name: Code checkout
          uses: actions/checkout@v4

        - name: BUild and upload to ECR
          uses: appleboy/docker-ecr-action@master #https://github.com/marketplace/actions/docker-ecr
          with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID}}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
            registry: ${{ secrets.REGISTRY }}
            repo: ${{env.ECR_REPOSITORY}}
            region: ${{env.AWS_REGION}}
            tags: latest, ${{github.run_number}} # github.run_number -> will give the build id (can give many tags by , as delimitor)
            daemon_off: false
            dockerfile: ./Dockerfile
            context: ./
            
    DEPLOY_TO_EKS:
      needs: BUILD_AND_PUBLISH
      runs-on: ubuntu-latest
      steps:
        - name: Code Checkout
          uses: actions/checkout@v4
        
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4.1.0 # https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
          with:
            aws-access-key-id:  ${{secrets.AWS_ACCESS_KEY_ID}}
            aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
            aws-region: ${{env.AWS_REGION}}
        
        - name: Get Kube Config file
          id: getConfig
          if: steps.apply.outcome == 'success'
          run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name ${{env.EKS_CLUSTER}} #get the kubeconfig file from eks

        - name: Print congif file
          run: cat ~/.kube/config

        - name: Login to ECR #for pushing the image
          run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password) #these cmd is to login to ECR. AWS usernmae is default and ECR don't give the passwrd insted if you already configured aws then you can get password by 'aws ecr get-login-password' cmd

        - name: Deploy Helm 
          uses: bitovi/github-actions-deploy-eks-helm@v1.2.12 #https://github.com/marketplace/actions/deploy-helm-chart-to-aws-eks-cluster
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{env.AWS_REGION}}
            cluster-name: ${{env.EKS_CLUSTER}}
            chart-path: helm/vprofilecharts
            namespace: default
            values: appimage=${{secrets.REGISTRY}}/${{env.ECR_REPOSITORY}},apptag=${{github.run_number}} #these values will passess to k8s yml files
            name: vprofile-stack